AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Nginx on AWS Fargate with ALB in ap-northeast-2 (Fully Parameterized Naming)"

Parameters:
  # Naming Parameters
  VPCName:
    Type: String
    Default: "iac-vpc"
  
  IGWName:
    Type: String
    Default: "iac-igw"
  
  NATGatewayAName:
    Type: String
    Default: "iac-nat-gw-a"
  
  NATGatewayCName:
    Type: String
    Default: "iac-nat-gw-c"
  
  PublicSubnetAName:
    Type: String
    Default: "iac-pub-sn-a"
  
  PublicSubnetCName:
    Type: String
    Default: "iac-pub-sn-c"
  
  PrivateSubnetAName:
    Type: String
    Default: "iac-priv-sn-a"
  
  PrivateSubnetCName:
    Type: String
    Default: "iac-priv-sn-c"
  
  PublicRouteTableName:
    Type: String
    Default: "iac-pub-rt"
  
  PrivateRouteTableAName:
    Type: String
    Default: "iac-priv-rt-a"
  
  PrivateRouteTableCName:
    Type: String
    Default: "iac-priv-rt-c"

  # Network Configuration
  VPCCIDR:
    Type: String
    Default: "10.20.0.0/16"

  PublicSubnetACIDR:
    Type: String
    Default: "10.20.1.0/24"

  PublicSubnetCCIDR:
    Type: String
    Default: "10.20.2.0/24"

  PrivateSubnetACIDR:
    Type: String
    Default: "10.20.11.0/24"

  PrivateSubnetCCIDR:
    Type: String
    Default: "10.20.12.0/24"

  BucketName:
    Type: String

  ContainerPort:
    Type: Number
    Default: 80

  DesiredCount:
    Type: Number
    Default: 2

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName

  # Internet Gateway
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref IGWName

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  # Public Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetACIDR
      AvailabilityZone: "ap-northeast-2a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref PublicSubnetAName

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCCIDR
      AvailabilityZone: "ap-northeast-2c"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref PublicSubnetCName

  # Private Subnets
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetACIDR
      AvailabilityZone: "ap-northeast-2a"
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnetAName

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCCIDR
      AvailabilityZone: "ap-northeast-2c"
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnetCName

  # Elastic IPs
  EIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateways
  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPA.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Ref NATGatewayAName

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PublicRouteTableName

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  # Private Route Tables
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PrivateRouteTableAName

  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PrivateRouteTableCName

  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTableC


  # ECS Fargate 클러스터
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "iac-ecs-cluster"

  # 보안 그룹 (ECS Fargate 컨테이너)
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ECS Fargate Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ALB Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  # ALB (인터넷 접속용)
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: [ Bucket, ELBLogBucketPolicy ]
    Properties:
      Name: "iac-alb"
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Type: application
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref Bucket

  # Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      VpcId: !Ref VPC
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  # ALB 리스너 (HTTP 80)
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ALBTargetGroup
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # ECS Task Execution Role
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "AmazonECSTaskExecutionRolePolicy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "AmazonECSTaskRolePolicy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: "*"

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "nginx-task"
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: "nginx-container"
          Image: "nginx:latest"
          Cpu: 256
          Memory: 512
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: ENV
              Value: production
            - Name: REGION
              Value: ap-northeast-2
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/ecs/nginx"
              awslogs-region: "ap-northeast-2"
              awslogs-stream-prefix: "ecs"
              awslogs-create-group: "true"

  # ECS 서비스
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - ALBTargetGroup
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: "iac-nginx-svc"
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetC
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroup
          ContainerName: "nginx-container"
          ContainerPort: !Ref ContainerPort

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ELBLogBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Id: "AWSCFn-AccessLogs-Policy-20180920"
        Version: "2012-10-17"
        Statement:
          - Sid: "AlbLogs"
            Effect: "Allow"
            Action:
              - "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${Bucket}/AWSLogs/${AWS::AccountId}/*
            Principal:
              AWS: "arn:aws:iam::600734575887:root"

Outputs:
  LoadBalancerDNS:
    Description: "The DNS of the ALB"
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  ECSClusterName:
    Description: "ECS Cluster Name"
    Value: !Ref ECSCluster

  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref Bucket